/** Задание 11: Рабочие места
 * Напишите программу, в которой будет храниться информация по рабочим местам (при запуске программа создает несколько  записей).
 * Используйте коллекцию map для хранения информации.
 * Номера рабочих мест это ключи коллекции, а значение — это ФИО сотрудника, занимающего данное место.
 * Добавьте несколько сотрудников в коллекцию и добавьте возможность для пользователя узнать кто занимает рабочее месте по его номеру.
 */
fun main(args: Array<String>) {
    var isFinished = false // флаг выхода из программы для ветки главного меню

    // берем тип String для ключей (рабочее место) для того, чтобы устранить возможные exception при вводе номеров мест
    // также данная реализация более общая, на случай когда номера - это не просто числа, а что-то вроде "1B.809"
    val workplaceMap = mutableMapOf(
            "1" to "Королёв Сергей Павлович",
            "2" to "Гагарин Юрий Алексеевич",
            "3" to "Циолковский Константин Эдуардович"
    )

    println("Программа для хранения рабочих мест сотрудников.")

    while (!isFinished) {

        println("Выберите желаемое действие [1-4]:")
        println("1. Добавить нового сотрудника в базу")
        println("2. Найти сотрудника по номеру рабочего места")
        println("3. Посмотреть список всех сотрудников и номеров их рабочих мест")
        println("4. Выход из программы")

        var isCorrectChoice = false // флаг факта корректного ввода для ветки главного меню

        while (!isCorrectChoice) {
            print("Ваш выбор: ")

            val menuChoice = readLine()!!.trim()

            when (menuChoice) {
                "1" -> { // добавление нового сотрудника в базу
                    var isAddMore = false // флаг для зацикливания ввода нового сотрудника (или выхода в меню)

                    while (!isAddMore) {
                        print("Введите ФИО нового сотрудника: ")
                        val workplaceName = readLine()!!.trim()

                        var isAnotherNumber = false // флаг выбора другого номера на случай если место уже занято
                        while (!isAnotherNumber) {
                            print("Введите номер рабочего места сотрудника: ")
                            val workplaceNumber = readLine()!!.trim()

                            if (!workplaceMap.containsKey(workplaceNumber)) {
                                workplaceMap[workplaceNumber] = workplaceName
                                isAnotherNumber = true
                            } else { // ветка для подтверждения замены старого сотрудника на нового
                                println("Данное рабочее место уже занято! Заменить старого сотрудника на нового? [1-да, (другой символ)-нет]")
                                if (readLine()!!.trim() == "1") {
                                    workplaceMap[workplaceNumber] = workplaceName
                                    isAnotherNumber = true
                                }
                            }
                        }

                        println("Сотрудник успешно добавлен в базу рабочих мест!")
                        print("Добавить еще? [0-нет, (любой символ)-да]: ")
                        val isAddMoreInput = readLine()!!.trim()
                        if (isAddMoreInput == "0") {
                            isAddMore = true
                        }
                    }
                    println()
                    isCorrectChoice = true
                }
                "2" -> { // поиск сотрудника по номеру его рабочего места
                    var isSearchAgain = false // флаг для зацикливания ввода нового сотрудника (или выхода в меню)

                    while (!isSearchAgain) {

                        print("Введите номер рабочего места сотрудника: ")
                        val workplaceToSearch = readLine()!!.trim()

                        if (workplaceMap.containsKey(workplaceToSearch)) {
                            println("Данное рабочее место занято следующим сотрудником: ${workplaceMap[workplaceToSearch]}")
                        } else {
                            println("По данному номеру рабочего места сотрудников не обнаружено!")
                        }

                        print("Выполнить еще один поиск [1] или вернуться в главное меню [2]?: ")
                        when (readLine()!!.trim()) {
                            "1" -> { // пустая реализация (возвращает на новый поиск)
                            }
                            "0" -> {
                                isSearchAgain = true
                            }
                            else -> { // возврат в главное меню с информационным сообщением
                                println("Некорректный ввод! Возвращаемся в главное меню...")
                                isSearchAgain = true
                            }
                        }
                    }
                    println()
                    isCorrectChoice = true
                }
                "3" -> { // просмотреть текущий список всех сотрудников с номерами их рабочих мест
                    println("\nТекущий список сотрудников и их рабочих мест следующий:")
                    var counter = 1

                    // цикл прохода по коллекции в виде пронумерованного списка (для этого доп.переменная counter)
                    for ((k, v) in workplaceMap) {
                        println("$counter. $v, рабочее место №$k")
                        counter++
                    }

                    print("Продолжить [1] или выйти из программы [0]?: ")
                    when (readLine()!!.trim()) {
                        "1" -> { // пустая реализация (возвращает в главное меню)
                        }
                        "0" -> {
                            print("Спасибо, что воспользовались нашим прекрасным сервисом! Всего хорошего!")
                            isFinished = true
                        }
                        else -> { // возврат в главное меню с информационным сообщением
                            println("Некорректный ввод! Возвращаемся в главное меню...")
                        }
                    }
                    println()
                    isCorrectChoice = true
                }
                "4" -> { // выход из программы
                    println("Спасибо, что воспользовались нашим прекрасным сервисом! Всего хорошего!")
                    isFinished = true
                    isCorrectChoice = true
                }
                else -> { // отображение информационного сообщения и возврат к вводу из главного меню
                    println("Некорректный выбор! Введите целое число от 1 до 4, согласно пунктам меню!")
                }
            }
        }
    }
}